"use client";

import { InvoiceRequest, InvoiceResponse } from './invoice-api';

// Demo/Mock API service for testing PDF generation
export class DemoInvoiceApiService {
  // Simulate API delay
  private static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Generate a demo PDF URL (this would normally come from your PDF generation service)
  private static generateDemoPdfUrl(invoiceId: string): string {
    // In production, this would be a real PDF URL from your service
    // For demo purposes, we'll create a data URL with a simple PDF-like content
    const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 24 Tf
100 700 Td
(Invoice: ${invoiceId}) Tj
0 -50 Td
/F1 12 Tf
(Generated by FIBEM STOCK) Tj
0 -30 Td
(Date: ${new Date().toLocaleDateString()}) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f
0000000009 00000 n
0000000058 00000 n
0000000115 00000 n
0000000284 00000 n
0000000536 00000 n
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
633
%%EOF`;

    // Create a blob URL for the demo PDF
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    return URL.createObjectURL(blob);
  }

  // Mock PDF generation API
  static async generateInvoicePDF(invoiceData: InvoiceRequest): Promise<InvoiceResponse> {
    console.log('üîÑ Demo API: Generating invoice PDF for:', invoiceData.invoice_id);

    // Simulate API processing time
    await this.delay(2000);

    // Simulate occasional failures (10% chance)
    if (Math.random() < 0.1) {
      console.error('‚ùå Demo API: Simulated PDF generation failure');
      return {
        success: false,
        invoice_id: invoiceData.invoice_id,
        error: 'Demo API: Simulated generation failure'
      };
    }

    // Generate demo PDF URL
    const pdfUrl = this.generateDemoPdfUrl(invoiceData.invoice_id);

    console.log('‚úÖ Demo API: PDF generated successfully:', pdfUrl);

    return {
      success: true,
      invoice_id: invoiceData.invoice_id,
      pdf_url: pdfUrl
    };
  }

  // Mock PDF retrieval API
  static async getInvoicePDF(invoiceId: string): Promise<string | null> {
    console.log('üîç Demo API: Fetching PDF for invoice:', invoiceId);

    // Simulate API processing time
    await this.delay(1000);

    // Simulate occasional failures (5% chance)
    if (Math.random() < 0.05) {
      console.error('‚ùå Demo API: Simulated PDF fetch failure');
      return null;
    }

    // Return demo PDF URL
    const pdfUrl = this.generateDemoPdfUrl(invoiceId);
    console.log('‚úÖ Demo API: PDF fetched successfully:', pdfUrl);

    return pdfUrl;
  }

  // Helper to create a more realistic demo PDF with actual invoice data
  static generateDetailedDemoPDF(invoiceData: InvoiceRequest): string {
    // Create HTML content for the invoice
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Invoice ${invoiceData.invoice_id}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { display: flex; justify-content: space-between; margin-bottom: 30px; }
          .company { color: #00A6D6; }
          .invoice-details { background: #f8f9fa; padding: 20px; margin: 20px 0; }
          .client-details { margin: 20px 0; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
          th { background-color: #f8f9fa; font-weight: bold; }
          .total-row { font-weight: bold; background-color: #f8f9fa; }
          .footer { margin-top: 40px; text-align: center; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <div>
            <h1 class="company">FIBEM STOCK</h1>
            <p>Syst√®me de Gestion d'Inventaire</p>
            <p>123 Rue de l'Entreprise<br>75001 Paris, France</p>
          </div>
          <div>
            <h2>FACTURE</h2>
            <p><strong>N¬∞:</strong> ${invoiceData.invoice_id}</p>
            <p><strong>Date:</strong> ${new Date().toLocaleDateString('fr-FR')}</p>
          </div>
        </div>

        <div class="client-details">
          <h3>Facturer √†:</h3>
          <p><strong>${invoiceData.client.name}</strong></p>
          <p>${invoiceData.client.address.replace(/\n/g, '<br>')}</p>
          <p>Email: ${invoiceData.client.email}</p>
          <p>T√©l√©phone: ${invoiceData.client.phone}</p>
          <p>Pays: ${invoiceData.countryCode || 'FR'}</p>
      </div>

      <table>
          <thead>
            <tr>
              <th>Description</th>
              <th>SKU</th>
              <th>Qt√©</th>
              <th>Prix unitaire</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            ${invoiceData.products.map(product => `
              <tr>
                <td>${product.name}</td>
                <td>${product.sku}</td>
                <td>${product.quantity}</td>
                <td>${product.price.toFixed(2)} ${invoiceData.currency}</td>
                <td>${(product.price * product.quantity).toFixed(2)} ${invoiceData.currency}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>

        <div class="invoice-details">
          <table style="width: 300px; margin-left: auto;">
            <tr>
              <td><strong>Sous-total:</strong></td>
              <td style="text-align: right;">${invoiceData.products.reduce((sum, p) => sum + (p.price * p.quantity), 0).toFixed(2)} ${invoiceData.currency}</td>
            </tr>
            <tr>
              <td><strong>TVA (${invoiceData.vat_rate}%):</strong></td>
              <td style="text-align: right;">${(invoiceData.products.reduce((sum, p) => sum + (p.price * p.quantity), 0) * invoiceData.vat_rate / 100).toFixed(2)} ${invoiceData.currency}</td>
            </tr>
            <tr class="total-row">
              <td><strong>Total:</strong></td>
              <td style="text-align: right;"><strong>${(invoiceData.products.reduce((sum, p) => sum + (p.price * p.quantity), 0) * (1 + invoiceData.vat_rate / 100)).toFixed(2)} ${invoiceData.currency}</strong></td>
            </tr>
          </table>
        </div>

        <div style="margin-top: 40px;">
          <h4>Conditions de paiement:</h4>
          <p>Mode de paiement: ${invoiceData.payment_method === 'WIRE' ? 'Virement bancaire' : invoiceData.payment_method}</p>
          <p>Pays de facturation: ${invoiceData.countryCode || 'FR'}</p>
          <p>Paiement √† effectuer sous 30 jours</p>
        </div>

        <div class="footer">
          <p>Merci de votre confiance ‚Ä¢ FIBEM STOCK ‚Ä¢ www.fibemstock.fr</p>
        </div>
      </body>
      </html>
    `;

    // Convert HTML to blob URL (in real implementation, you'd convert to PDF)
    const blob = new Blob([htmlContent], { type: 'text/html' });
    return URL.createObjectURL(blob);
  }
}

// Configuration for demo mode
export const DEMO_MODE = process.env.NODE_ENV === 'development' || !process.env.NEXT_PUBLIC_INVOICE_API_URL;

// Export a unified service that switches between demo and real API
export const UnifiedInvoiceService = {
  async generateInvoicePDF(invoiceData: InvoiceRequest): Promise<InvoiceResponse> {
    if (DEMO_MODE) {
      console.log('üöÄ Using Demo Invoice API');
      return DemoInvoiceApiService.generateInvoicePDF(invoiceData);
    } else {
      console.log('üåê Using Production Invoice API');
      const { InvoiceApiService } = await import('./invoice-api');
      return InvoiceApiService.generateInvoicePDF(invoiceData);
    }
  },

  async getInvoicePDF(invoiceId: string): Promise<string | null> {
    if (DEMO_MODE) {
      console.log('üöÄ Using Demo Invoice API');
      return DemoInvoiceApiService.getInvoicePDF(invoiceId);
    } else {
      console.log('üåê Using Production Invoice API');
      const { InvoiceApiService } = await import('./invoice-api');
      return InvoiceApiService.getInvoicePDF(invoiceId);
    }
  }
};
